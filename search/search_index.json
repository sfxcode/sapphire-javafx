{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Sapphire JavaFX (SFX)"},{"location":"/index.html#sapphire-javafx-sfx-","text":"A JavaFX Application Framework for Scala User. It combines scala programming patterns with MVC for building complex JavaFX Applications.","title":"Sapphire JavaFX (SFX)"},{"location":"/index.html#cross-build","text":"Build and tested against Scala 2.12/2.13 and JDK 11/12","title":"Cross Build"},{"location":"/index.html#used-frameworks","text":"","title":"Used Frameworks"},{"location":"/index.html#javafx","text":"Java UI Application Framework as replacement for Swing.\nSapphire depends on OpenJFX 11/12.\nJavaFX Code Samples Samles under CatalogJavaFX\nhttps://openjfx.io","title":"JavaFX"},{"location":"/index.html#data-framework-sapphire-data-","text":"sapphire-data is used for reflection based property handling.","title":"Data Framework (sapphire-data)"},{"location":"/index.html#dependency-injection-optional-","text":"Sapphire use Apache Deltaspike as CDI Abstraction Layer (1.9.x).\nThe default CDI implementation depends on Apache OpenWebBeans (2.0.x).","title":"Dependency Injection (Optional)"},{"location":"/index.html#expression-language","text":"Expressions are resolved by EL 3 Tomcat Expression Language.\nExpression lookup imported from sapphire-data\nExpressions can be used in code and FXML files.","title":"Expression Language"},{"location":"/index.html#maven","text":"Sapphire is published to Bintray and linked to Maven Central.","title":"Maven"},{"location":"/index.html#repository","text":"resolvers += \"sfxcode-bintray\" at \"https://dl.bintray.com/sfxcode/maven\"","title":"Repository"},{"location":"/index.html#artifact","text":"sbt libraryDependencies += \"com.sfxcode.sapphire\" %% \"sapphire-javafx\" % \"1.1.3-SNAPSHOT\" Maven <dependencies>\n  <dependency>\n    <groupId>com.sfxcode.sapphire</groupId>\n    <artifactId>sapphire-javafx_2.13</artifactId>\n    <version>1.1.3-SNAPSHOT</version>\n  </dependency>\n</dependencies> Gradle dependencies {\n  implementation \"com.sfxcode.sapphire:sapphire-javafx_2.13:1.1.3-SNAPSHOT\"\n}","title":"Artifact"},{"location":"/index.html#demos","text":"Explore demos and Tutorial in project demo directory.\nAlso there is a showcase for commonly used pattern.","title":"Demos"},{"location":"/index.html#licence","text":"Apache 2","title":"Licence"},{"location":"/features.html","text":"","title":"Features"},{"location":"/features.html#features","text":"","title":"Features"},{"location":"/features.html#application","text":"SFXWindowController (Holds JavaFX Stage and Scene) SFXViewController FXML Loading Hot Reload","title":"Application"},{"location":"/features.html#bean-enhancement","text":"Every Java / Scala Bean can be used for SFXBean SFXBean has additional support for Java/Scala Maps SFXBean resolves Expressions on bean SFXBean creates Properties needed for Binding on demand SFXBean has change management by default","title":"Bean Enhancement"},{"location":"/features.html#scala-javafx-bean-binding","text":"Bindings by form id Binding with converter Adapter Pattern (SFXBean Adapter)","title":"Scala JavaFX Bean Binding"},{"location":"/features.html#","text":"The WindowController combines JavaFX Stage and Scene. Creates a stage and a scene. Scene content can be exchanged by replaceSceneContent function.\nSample with scene content switching can be found in the login demo.","title":"SFXWindowController"},{"location":"/features.html#","text":"Controller Lifecycle Node Locator","title":"SFXViewController"},{"location":"/features.html#first-class-fxml-support","text":"Easy Connect FXML with SFXViewController Different FXML path options","title":"First Class FXML Support"},{"location":"/features.html#additional","text":"Internationalization Support (i18n) Expression Language Support (EL 3)","title":"Additional"},{"location":"/getting_started.html","text":"","title":"Getting Started"},{"location":"/getting_started.html#getting-started","text":"","title":"Getting Started"},{"location":"/getting_started.html#setup-base-application-with-giter8","text":"g8 https://github.com/sfxcode/sapphire-sbt.g8","title":"Setup Base Application with Giter8"},{"location":"/getting_started.html#use-one-of-the-demo-applications-as-blueprint","text":"Demos are included under the demos folder of this project.\nSee Samples","title":"Use one of the demo applications as blueprint"},{"location":"/detail/index.html","text":"","title":"Core Concepts"},{"location":"/detail/index.html#core-concepts","text":"SFXApplicationController Features BaseApplicationController SFXAdditionalWindowController ModalWindowController SFXViewController Features Controller Lifecycle SFXBean Features Example FXBean Adapter Example SFXKeyBindings Code Sample Create Bindings Add Converter FxmlLoading Features Example Different FXML-Path lookup pattern Expression Language Usage Functions Default Usage I18n Support Adding Default (Application) Resource Bundle FXML Support","title":"Core Concepts"},{"location":"/detail/window_controller.html","text":"","title":"SFXApplicationController"},{"location":"/detail/window_controller.html#sfxapplicationcontroller","text":"The WindowController combines JavaFX Stage and Scene. Creates a stage and a scene. Scene content can be exchanged by replaceSceneContent function.\nSample with scene content switching can be found in the login demo.\nclass ApplicationController extends SFXApplicationController {\n  // Content here\n}\nWindowController height and width are 800 x 600 by default, but can be easily overwritten in implementation classes:\n// overwrite window default size\n  override def width: Int = 200\n  override def height: Int = 400","title":"SFXApplicationController"},{"location":"/detail/window_controller.html#features","text":"Lifecycle","title":"Features"},{"location":"/detail/window_controller.html#baseapplicationcontroller","text":"BaseApplicationController is normally the base class for your ApplicationController.\nInitialization is automatically done by the Application class (must be an object that extends BaseApplication) to be runnable","title":"BaseApplicationController"},{"location":"/detail/window_controller.html#lifecycle-methods","text":"Following methods are supported:\napplicationWillLaunch (before setting stage) applicationDidLaunch (after setting stage) applicationWillStop (before Appliction terminates)","title":"Lifecycle Methods"},{"location":"/detail/window_controller.html#application","text":"Sample Code:\ncopysource object Application extends SFXApplication with DeltaspikeBeanResolver {\n\n  DeltaspikeLauncher.init()\n  SFXApplicationEnvironment.documentLoader = getBean[DeltaspikeDocumentLoader]()\n\n  override val applicationController: SFXApplicationController = getBean[ApplicationController]()\n}\nBaseApplication Code:\ncopysourceabstract class SFXApplication extends SFXStageSupport with LazyLogging {\n  val startTime: Long = System.currentTimeMillis()\n\n  def main(args: Array[String]): Unit = {\n    SFXApplicationEnvironment.setApplication(this)\n    Application.launch(classOf[SFXJavaApplication], args: _*)\n  }\n\n  val applicationController: SFXApplicationController\n\n  def applicationWillLaunch(): Unit = {}\n\n  def applicationDidLaunch(): Unit =\n    logger.info(\"Application Startup in %s ms\".format(System.currentTimeMillis() - startTime))\n\n  def applicationWillTerminate(): Unit = {}\n\n}","title":"Application"},{"location":"/detail/window_controller.html#applicationcontroller","text":"Base class for your Application (extends normally SFXApplicationController). Is is used for setting the content view and holds application wide information.\nSample Code:\ncopysource @Named\n@ApplicationScoped\nclass ApplicationController extends SFXApplicationController {\n\n  lazy val mainController: IssueTrackingLiteController = getController[IssueTrackingLiteController]()\n\n  def applicationDidLaunch() {\n    replaceSceneContent(mainController)\n  }\n\n  // CDI Prducer Method\n  @Produces\n  def emptyName: EmptyName =\n    EmptyName(\"New Issue\")\n\n}","title":"ApplicationController"},{"location":"/detail/window_controller.html#sfxadditionalwindowcontroller","text":"Multiple Windows are supported by extending SFXAdditionalWindowController.\nExample Usage:","title":"SFXAdditionalWindowController"},{"location":"/detail/window_controller.html#create-a-cdi-bean-that-extends-additionalwindowcontroller","text":"copysourceabstract class AbstractWindowController extends SFXAdditionalWindowController {\n\n  lazy val viewController: AdditionalViewController =\n    getController[AdditionalViewController]()\n\n  override def startup(): Unit = {\n    super.startup()\n    val stage: Unit = createStage()\n\n    replaceSceneContent(viewController)\n  }\n\n  override def width: Int = 200\n\n  override def height: Int = 200\n\n}","title":"Create a CDI Bean that extends AdditionalWindowController"},{"location":"/detail/window_controller.html#create-a-variable-in-your-applicationcontroller-for-example-","text":"copysourcelazy val secondWindowController = new SecondWindowController","title":"Create a variable (in your ApplicationController for example)"},{"location":"/detail/window_controller.html#show-second-window","text":"Use x and y coordinates for window position.\ncopysourcedef actionShowSecondWindow(event: ActionEvent): Unit = {\n  val x = applicationController.stage.getX + applicationController.stage.getWidth\n  val y = applicationController.stage.getY\n  applicationController.secondWindowController.show(x, y)\n}","title":"Show second Window"},{"location":"/detail/window_controller.html#close-second-window","text":"copysourcedef actionCloseSecondWindow(event: ActionEvent): Unit =\n  applicationController.secondWindowController.close()","title":"Close second Window"},{"location":"/detail/window_controller.html#modalwindowcontroller","text":"Modal Window is basically a special Instance of a SFXAdditionalWindowController. It can be used for custom dialogs, preferences panes and so on. You only have to overwrite modality like in the sample code below:\ncopysource class ModalWindowController extends AbstractWindowController {\n  override def modality: Modality = Modality.APPLICATION_MODAL\n  override def stageStyle: StageStyle = StageStyle.UTILITY\n\n}","title":"ModalWindowController"},{"location":"/detail/window_controller.html#create-a-variable-in-your-applicationcontroller-for-example-","text":"copysourcelazy val modalWindowController = new ModalWindowController","title":"Create a variable (in your ApplicationController for example)"},{"location":"/detail/window_controller.html#open-modal-window","text":"copysourcedef actionShowModalWindow(event: ActionEvent): Unit =\n  applicationController.modalWindowController.showAndWait()","title":"Open Modal Window"},{"location":"/detail/view_controller.html","text":"","title":"SFXViewController"},{"location":"/detail/view_controller.html#sfxviewcontroller","text":"The SFXViewController is the core pattern for component based application design.","title":"SFXViewController"},{"location":"/detail/view_controller.html#features","text":"Controller Lifecycle Node Locator Controller CDI Additions","title":"Features"},{"location":"/detail/view_controller.html#controller-lifecycle","text":"Main Part of the SFXViewController pattern is the exchange of the actual presented view. Building a dynamic UI is all about build actual screen display from different views (like Lego) and to exchange parts of the screen in case of navigation or other activities.","title":"Controller Lifecycle"},{"location":"/detail/fxbean.html","text":"","title":"SFXBean"},{"location":"/detail/fxbean.html#sfxbean","text":"SFXBean is one of the core concepts of this framework. It is an adapter for Java/Scala Beans (Maps) for automatic JavaFX Binding. SFXBean does all the JavaFX Property Binding for your Application.\nSFXBean extends DataAdapter class form sapphire-data.","title":"SFXBean"},{"location":"/detail/fxbean.html#features","text":"Every Java / Scala Bean can be used for SFXBean SFXBean has additional support for Java / Scala Maps SFXBean resolves Expressions on bean SFXBean creates Properties needed for Binding on demand SFXBean has change management by default\nHint Use Sapphire Includes for implicit Bean to SFXBean Conversion","title":"Features"},{"location":"/detail/fxbean.html#example","text":"case class Author(name: String)\ncase class Book(id: Long, title: String, pages: Int, author: Author)\n\n// create SFXBean for sample case class\nval scalaBook = Book(1, \"Programming In Scala\", 852, Author(\"Martin Odersky\"))\nval book = SFXBean[Book](scalaBook)\n\n// getValue and updateValue are used for bean property access and modification\n// getProperty, getStringProperty ... \n// are used for automatic create a JavaFX Property\nval title = book.getValue(\"title\")\n// \"Programming In Scala\"\n\nval titleProperty = book.getStringProperty(\"title\")\n\nbook.updateValue(\"title\", \"Programming In Scala 3.0\")\n// title is updated, titleProperty as well\n\nval newTitle = book.getValue(\"title\")\n// \"Programming In Scala 3.0\"\n\nval newTitleFromProperty = titleProperty.getValue  // \"Programming In Scala 3.0\"\n\n// getValue and updateValue for underlying class by dot syntax\nval authorName = book.getValue(\"author.name\")  // \"Martin Odersky\"","title":"Example"},{"location":"/detail/fxbean_adapter.html","text":"","title":"FXBean Adapter"},{"location":"/detail/fxbean_adapter.html#fxbean-adapter","text":"FXBeanAdapter reflects changes of bean properties to the UI and vice versa.\nIt automatically creates bidirectional bindings to any bean.On bean update old bindings are cleared and new bindings for the new bean are created.","title":"FXBean Adapter"},{"location":"/detail/fxbean_adapter.html#example","text":"","title":"Example"},{"location":"/detail/fxbean_adapter.html#define-adapter","text":"copysource@FXML\nvar personBox: VBox = _","title":"Define Adapter"},{"location":"/detail/fxbean_adapter.html#add-bindings-and-converter","text":"copysourceoverride def didGainVisibilityFirstTime(): Unit = {\n  super.didGainVisibilityFirstTime()\n\n  // Bindings lookup by id or fx:id in fxml\n  val bindings = SFXKeyBindings(\"id\", \"name\", \"age\")\n  // Expression Binding Example\n  bindings.add(\"person\", \"${sfx:i18n('personText', _self.name(), _self.age())}\")\n\n  adapter.addBindings(bindings)\n\n  adapter.addIntConverter(\"age\")\n\n  personBox.visibleProperty().bind(adapter.hasBeanProperty)\n}\n\ndef items: ObservableList[SFXBean[Person]] = PersonFactory.personList","title":"Add Bindings and Converter"},{"location":"/detail/fxbean_adapter.html#change-adapter-items","text":"copysourcedef selectPerson(person: SFXBean[Person]): Unit = {\n  adapter.set(person)\n}\n\ndef actionRevert(event: ActionEvent): Unit =\n  adapter.revert()","title":"Change Adapter items"},{"location":"/detail/bindings.html","text":"","title":"SFXKeyBindings"},{"location":"/detail/bindings.html#sfxkeybindings","text":"SFXKeyBindings is a helper class for SFXBeanAdapter. It provides Bindings from beans to ui representations.\nIt contains convenience functions for adding keys to FXBean Adapter and for conversion.","title":"SFXKeyBindings"},{"location":"/detail/bindings.html#code-sample","text":"","title":"Code Sample"},{"location":"/detail/bindings.html#fxml-snippet","text":"<Label id=\"person\"/>\n<TextField id=\"name\"/>\n<TextField fx:id=\"age\"/>","title":"FXML Snippet"},{"location":"/detail/bindings.html#scala-viewcontroller-snippet","text":"copysource// Bindings lookup by id or fx:id in fxml\nval bindings = SFXKeyBindings(\"id\", \"name\", \"age\")\n// Expression Binding Example\nbindings.add(\"person\", \"${sfx:i18n('personText', _self.name(), _self.age())}\")\n\nadapter.addBindings(bindings)","title":"Scala ViewController Snippet"},{"location":"/detail/bindings.html#create-bindings","text":"Bindings are created by the value of the id or fx:id attributes in the fxml file.\nNote If node lookup from appication root node does not work, you can fix it by adding a parent Node to FXBeanAdapter. copysource@FXML\nvar personBox: VBox = _","title":"Create Bindings"},{"location":"/detail/bindings.html#add-converter","text":"copysourceadapter.addIntConverter(\"age\")","title":"Add Converter"},{"location":"/detail/fxml_loading.html","text":"","title":"FxmlLoading"},{"location":"/detail/fxml_loading.html#fxmlloading","text":"","title":"FxmlLoading"},{"location":"/detail/fxml_loading.html#features","text":"load fxml by different pattern (convention over configuration) SFXViewController rootPane is bound to fxml root element","title":"Features"},{"location":"/detail/fxml_loading.html#example","text":"ViewController extends FxmlLoading trait. FxmlLoading provide the\ngetController[T <: SFXViewController](fxml: String = \"\")\nmethod. The package path of the controller is the default fxml directory. [name]Controller is converted to [name].fxml (WorkspaceController -> Workspace.fxml).\npackage controller\n\nclass MainViewController extends SFXViewController with LazyLogging {\n\n  // workspaces\n  lazy val workspaceController = getController[WorkspaceController]()\n  // navigation\n  lazy val defaultNavigationController = \n     getController[DefaultNavigationController]()\n  \n}\nWorkspaceController fxml must be saved at /controller/Workspace.fxml.","title":"Example"},{"location":"/detail/fxml_loading.html#different-fxml-path-lookup-pattern","text":"Hint In case of mixing this pattern, FXML-Path is resolved from Pattern 1 to 3","title":"Different FXML-Path lookup pattern"},{"location":"/detail/fxml_loading.html#pattern-1-define-path-in-getcontroller-","text":"lazy val controller = \n     getController[WorkspaceController](\"/fxml/special/path/special_name.fxml\")\n@FxmlLoader(path=“/fxml/widget/Person.fxml”) class PersonController extends AbstractViewController { WorkspaceController fxml must be saved at /fxml/special/path/special_name.fxml.","title":"Pattern 1: Define path in getController:"},{"location":"/detail/fxml_loading.html#pattern-2-define-path-in-fxmlloader-annotation-","text":"@FxmlLoader(path=\"/fxml/widget/Person.fxml\")\nclass PersonController extends AbstractViewController {\n  // some stuff ...\n}\nWorkspaceController fxml must be saved at /fxml/widget/Person.fxml.","title":"Pattern 2: Define path in FxmlLoader Annotation:"},{"location":"/detail/fxml_loading.html#pattern-3-define-path-in-application-conf-","text":"sapphire.javafx.fxml.basePath=\"/fxml/\"\nWorkspaceController fxml must be saved at /fxml/Workspace.fxml.","title":"Pattern 3: Define path in application.conf:"},{"location":"/detail/expression_language.html","text":"","title":"Expression Language"},{"location":"/detail/expression_language.html#expression-language","text":"Expression Language is based on Tomcat Expression Language.","title":"Expression Language"},{"location":"/detail/expression_language.html#usage","text":"","title":"Usage"},{"location":"/detail/expression_language.html#sample","text":"copysourceval person: SFXBean[Person] = PersonDatabase.testPerson(0)\nperson.getValue(\"${_self.name()}\") must be equalTo \"Cheryl Hoffman\"\nperson.getValue(\"${_self.age()}\") must be equalTo 25\nperson.getValue(\"${_self.age() * 2}\") must be equalTo 50","title":"Sample"},{"location":"/detail/expression_language.html#fxml","text":"Usage in FXML is supported, but because of the actual use of the Dollar Char ($) you have to use ! instead.\nSo ${_self.name()} and !{_self.name()} are evaluated equal.\n<TableColumn prefWidth=\"200.0\" text=\"Description\">\n   <cellValueFactory>\n       <SFXTableValueFactory property=\"Name: !{_self.name()} Age: !{_self.age()} (!{_self.id()}) \"/>\n   </cellValueFactory>\n</TableColumn>","title":"FXML"},{"location":"/detail/expression_language.html#functions","text":"EL supports defining own functions in expressions. There is a FunctionHelper in the Expressions object. Some Functions are predefined.","title":"Functions"},{"location":"/detail/expression_language.html#predefined-functions","text":"Functions can have a prefix. The Sapphire Javafx Functions has the prefix: sf.\nfunction sample info frameworkName ${sfx:frameworkName()} frameworkVersion ${sfx:frameworkVersion()} dateString ${sfx:dateString(testDate)} Default Pattern: YYYY-MM-dd now ${sfx:frameworkName()} nowAsString ${sfx:nowAsString()}\").toString Default Pattern: YYYY-MM-dd boolString ${sfx:boolString(testBoolean,‘Y’, ‘N’)} configString ${sfx:configString(‘test.string’)} i18n ${sfx:i18n(‘personText’)}","title":"Predefined Functions"},{"location":"/detail/expression_language.html#default-usage","text":"","title":"Default Usage"},{"location":"/detail/expression_language.html#el-in-windowcontroller-viewcontroller","text":"WindowController- and ViewController-Beans are automatically registered by name","title":"EL in WindowController / ViewController"},{"location":"/detail/i18n.html","text":"","title":"I18n Support"},{"location":"/detail/i18n.html#i18n-support","text":"Internationalization oder I18n is available in different places of Sapphire Javafx.\nFXML Files ViewController, WindowController Expression Language","title":"I18n Support"},{"location":"/detail/i18n.html#adding-default-application-resource-bundle","text":"Normally you will add resources in the ApplicationController.\ncopysourceSFXApplicationEnvironment.loadResourceBundle(\"bundles/application\")\nThe ApplicationEnvironment will hold the reference to the loaded resources.","title":"Adding Default (Application) Resource Bundle"},{"location":"/detail/i18n.html#fxml-support","text":"If there is a loaded resource, you can use it in the fxml files with the following pattern: %\n<Button mnemonicParsing=\"false\" onAction=\"#actionToggleWorkspace\" text=\"%navigation.toggle\" />\nIf you want a special resource bundle for one or more fxml files, you have to override resourceBundleForView in the ApplicationController.\ncopysource// only example values ...\noverride def resourceBundleForView(viewPath: String): ResourceBundle =\n  if (viewPath.contains(\"mySpecialViewName\")) {\n    val path = \"myCustomResourcePath\"\n    val classLoader = Thread.currentThread().getContextClassLoader\n    ResourceBundle.getBundle(path, Locale.getDefault(), classLoader)\n  } else\n    super.resourceBundleForView(viewPath) // =  applicationEnvironment.resourceBundle","title":"FXML Support"},{"location":"/control/index.html","text":"","title":"Controls"},{"location":"/control/index.html#controls","text":"Additional JavaFX Controls with sapphire support:","title":"Controls"},{"location":"/control/index.html#tableview","text":"SFXTableCellFactory SFXTreeTableValueFactory SFXTableValueFactory SFXTreeTableValueFactory","title":"TableView"},{"location":"/control/index.html#listview","text":"SFXListCellFactory SFXDataListView SFXDualDataListView","title":"ListView"},{"location":"/control/index.html#index","text":"Cell Factory Class and Package Alignment Converter Sample Value Factory Format Property Sample TableView Usage in SFXViewController FXML Sample ListView SFXDataListView SFXDualDataListView","title":"Index"},{"location":"/control/cell_factory.html","text":"","title":"Cell Factory"},{"location":"/control/cell_factory.html#cell-factory","text":"SFX CellFactories supports simpleClassName, packageName, alignment and converter property.\nSFXTableCellFactory SFXTreeTableCellFactory","title":"Cell Factory"},{"location":"/control/cell_factory.html#class-and-package","text":"packeName is javafx.scene.control.cell. by default\nTextFieldTableCell is used by default. For other cell Types you need to provide a simpleClassName.\nsimpleClassName: CheckBoxTableCell leads to javafx.scene.control.cell.CheckBoxTableCell,\nTo provide another class prefix for custom classes you have to overwrite the packageName","title":"Class and Package"},{"location":"/control/cell_factory.html#alignment","text":"Possible values: center, left, right","title":"Alignment"},{"location":"/control/cell_factory.html#converter","text":"String converters by converter type name\nconverter: Double leads to DoubleStringConverter, Boolean leads to BooleanStringConverter","title":"Converter"},{"location":"/control/cell_factory.html#sample","text":"<cellFactory>\n     <SFXTableCellFactory simpleClassName=\"CheckBoxTableCell\" alignment=\"right\"/>\n</cellFactory>\n<cellFactory>\n     <SFXTableCellFactory alignment=\"right\" converter=\"Double\"/>\n</cellFactory>","title":"Sample"},{"location":"/control/value_factory.html","text":"","title":"Value Factory"},{"location":"/control/value_factory.html#value-factory","text":"SFX ValueFactories supports property and format.\nSFXTableCellFactory SFXTreeTableCellFactory","title":"Value Factory"},{"location":"/control/value_factory.html#format","text":"Date and Number formats are supported","title":"Format"},{"location":"/control/value_factory.html#property","text":"Property defines the key, that is used to resolve the value for a key in SFXBean objects.\nHint Expressions in property are supported, but you have to use ! as expression prefix","title":"Property"},{"location":"/control/value_factory.html#sample","text":"<cellValueFactory>\n      <SFXTreeTableValueFactory property=\"balance\" format=\"#,##0.00\" />\n</cellValueFactory>\n<cellValueFactory>\n      <SFXTableValueFactory property=\"!{_self.age()} / !{_self.gender()}\" />\n</cellValueFactory>","title":"Sample"},{"location":"/control/table_view.html","text":"","title":"TableView"},{"location":"/control/table_view.html#tableview","text":"For TableView with SFXBean objects create an ObservableList and use the property attribute in SFXTableValueFactory tag.","title":"TableView"},{"location":"/control/table_view.html#usage-in-sfxviewcontroller","text":"Hint To convert List[FXBean] to ObservableList you can use the trait SFXBeanConversions\ncopysource@FXML\nvar table: TableView[SFXBean[Person]] = _\n\noverride def didGainVisibilityFirstTime(): Unit = {\n  super.didGainVisibilityFirstTime()\n  val items: ObservableList[SFXBean[Person]] = PersonDatabase.smallPersonList\n  table.setItems(items)\n}","title":"Usage in SFXViewController"},{"location":"/control/table_view.html#fxml-sample","text":"copysource<TableView fx:id=\"table\" BorderPane.alignment=\"CENTER\">\n    <columns>\n        <TableColumn  text=\"Name\">\n            <cellValueFactory>\n                <SFXTableValueFactory property=\"name\" />\n            </cellValueFactory>\n        </TableColumn>\n        <TableColumn  text=\"Company\">\n            <cellValueFactory>\n                <SFXTableValueFactory property=\"company\" />\n            </cellValueFactory>\n        </TableColumn>\n        <TableColumn  text=\"Expression Test1 \">\n            <cellValueFactory>\n                <SFXTableValueFactory property=\"!{_self.age()} / !{_self.gender()}\" />\n            </cellValueFactory>\n        </TableColumn>\n        <TableColumn  text=\"Expression Test 2\">\n            <cellValueFactory>\n                <SFXTableValueFactory property=\"!{simplePersonTableController.testString()}\" />\n            </cellValueFactory>\n        </TableColumn>\n        <TableColumn  text=\"Balance\">\n            <cellValueFactory>\n                <SFXTableValueFactory property=\"balance\" format=\"#,##0.00\" />\n            </cellValueFactory>\n            <cellFactory>\n                <SFXTableCellFactory alignment=\"right\"/>\n            </cellFactory>\n        </TableColumn>\n        <TableColumn  text=\"Active\">\n            <cellValueFactory>\n                <SFXTableValueFactory property=\"isActive\" />\n            </cellValueFactory>\n        </TableColumn>\n        <TableColumn  text=\"Checkbox Test\">\n            <cellValueFactory>\n                <SFXTableValueFactory property=\"isActive\" />\n            </cellValueFactory>\n            <cellFactory>\n                <SFXTableCellFactory simpleClassName=\"CheckBoxTableCell\" alignment=\"right\"/>\n            </cellFactory>\n        </TableColumn>\n    </columns>\n</TableView>","title":"FXML Sample"},{"location":"/control/list_view.html","text":"","title":"ListView"},{"location":"/control/list_view.html#listview","text":"","title":"ListView"},{"location":"/control/list_view.html#sfxdatalistview","text":"","title":"SFXDataListView"},{"location":"/control/list_view.html#sfxdualdatalistview","text":"","title":"SFXDualDataListView"},{"location":"/tutorial/index.html","text":"","title":"Tutorial"},{"location":"/tutorial/index.html#tutorial","text":"Tutorial Setup Tutorial Application Tutorial Main View Controller Tutorial Navigation","title":"Tutorial"},{"location":"/tutorial/setup.html","text":"","title":"Tutorial Setup"},{"location":"/tutorial/setup.html#tutorial-setup","text":"","title":"Tutorial Setup"},{"location":"/tutorial/setup.html#sources","text":"The sources for this tutorial are in the Github Tutorial Directory of sapphire-javafx in the appdemo package.","title":"Sources"},{"location":"/tutorial/setup.html#setup","text":"Easy Project Setup by using the sapphire-javafx giter8 template. See giter8 Documentation for g8 setup.\nGiter8 template for sapphire-javafx.","title":"Setup"},{"location":"/tutorial/setup.html#usage","text":"g8 https://github.com/sfxcode/sapphire-sbt.g8","title":"Usage"},{"location":"/tutorial/setup.html#base-project-structure","text":"","title":"Base Project Structure"},{"location":"/tutorial/setup.html#ide","text":"IntelliJ IDEA Community Edition or other IDE with Scala ana JavaFX support.","title":"IDE"},{"location":"/tutorial/setup.html#fxml-editor","text":"Helpful for FXML Editing is the Scene Builder.","title":"FXML Editor"},{"location":"/tutorial/setup.html#scene-graph-visualization","text":"For understanding of the scene graph there is a tool called Scenic View.","title":"Scene Graph Visualization"},{"location":"/tutorial/application.html","text":"","title":"Tutorial Application"},{"location":"/tutorial/application.html#tutorial-application","text":"","title":"Tutorial Application"},{"location":"/tutorial/application.html#application-object","text":"A sapphire application must contain an Application object that extends SFXApplication.\nAll startup code is inside this SFXApplication pattern.\ncopysourcepackage com.sfxcode.sapphire.javafx.demo.tutorial\n\nimport com.sfxcode.sapphire.javafx.application.SFXApplication\nimport com.sfxcode.sapphire.javafx.controller.SFXApplicationController\n\nobject Application extends SFXApplication {\n\n  val applicationController: SFXApplicationController = new ApplicationController\n\n  override def height: Int = 600\n\n  override def width: Int = 800\n\n  override def forceMaxWidth: Boolean = true\n\n  override def forceMaxHeight: Boolean = true\n}","title":"Application object"},{"location":"/tutorial/application.html#sfxapplicationcontroller","text":"Application controller is used for startup purposes.\nNormally the main scene content is replaced by a SFXViewController.\nHere we will use a MainViewController and later we connect a Navigation-, Workspace- and StatusBarController.\ncopysourcepackage com.sfxcode.sapphire.javafx.demo.tutorial\n\nimport java.util.{ Locale, ResourceBundle }\nimport com.sfxcode.sapphire.javafx.application.SFXApplicationEnvironment\nimport com.sfxcode.sapphire.javafx.controller.SFXApplicationController\nimport com.sfxcode.sapphire.javafx.demo.tutorial.controller.app.MainViewController\n\nclass ApplicationController extends SFXApplicationController {\n\n  var mainViewController: MainViewController = _\n\n  def applicationDidLaunch() {\n    logger.info(\"start \" + this)\n    // #Resources\n    SFXApplicationEnvironment.loadResourceBundle(\"bundles/application\")\n    // #Resources\n    reload()\n  }\n\n  def reload(): Unit = {\n    // Styling\n    reloadStyles()\n    // Resources\n    SFXApplicationEnvironment.clearResourceBundleCache()\n    SFXApplicationEnvironment.loadResourceBundle(\"bundles/application\")\n    // FXML\n    mainViewController = getController[MainViewController]()\n    replaceSceneContent(mainViewController)\n    // do some other stuff\n  }\n\n  def applicationName: ApplicationName =\n    ApplicationName(configStringValue(\"application.name\"))\n\n  // #CustomBundle\n  // only example values ...\n  override def resourceBundleForView(viewPath: String): ResourceBundle =\n    if (viewPath.contains(\"mySpecialViewName\")) {\n      val path = \"myCustomResourcePath\"\n      val classLoader = Thread.currentThread().getContextClassLoader\n      ResourceBundle.getBundle(path, Locale.getDefault(), classLoader)\n    } else\n      super.resourceBundleForView(viewPath) // =  applicationEnvironment.resourceBundle\n\n  // #CustomBundle\n\n}\n\ncase class ApplicationName(name: String)","title":"SFXApplicationController"},{"location":"/tutorial/application.html#mainviewcontroller","text":"The following code snippet loads the MainViewController by the FXMLoader from the CDI managed ApplicationController Bean.\nlazy val mainViewController = getController[MainViewController]()\nThis pattern for Controller-Loading is commonly used in sapphire-javafx Framework.","title":"MainViewController"},{"location":"/tutorial/main_view.html","text":"","title":"Tutorial Main View Controller"},{"location":"/tutorial/main_view.html#tutorial-main-view-controller","text":"","title":"Tutorial Main View Controller"},{"location":"/tutorial/main_view.html#main-fxml-file","text":"The MainViewController in the /controller/MainViewController needs a valid FXML File. The bindings for Navigation, Workspace and StatusBar Controller uses the fx:id values.\ncopysource<BorderPane>\n    <top>\n        <AnchorPane fx:id=\"navigationPane\"/>\n    </top>\n    <center>\n        <AnchorPane fx:id=\"workspacePane\"/>\n    </center>\n    <bottom>\n        <AnchorPane fx:id=\"statusPane\"/>\n    </bottom>\n</BorderPane>","title":"Main FXML File"},{"location":"/tutorial/main_view.html#mainviewcontroller","text":"For adding SubController and displaying their UI content following steps are needed:\nPrepare SubController Connect with FXML identifier Define ContentManager Load Controller in the MainViewController LifeCycle Optional Prepare Functions for Controller switching Optional CDI based Functions / Injection Points","title":"MainViewController"},{"location":"/tutorial/main_view.html#prepare-subcontroller","text":"copysourcelazy val workspaceController: WorkspaceController =\n  getController[WorkspaceController]()\nlazy val barChartController: ChartPageController =\n  getController[ChartPageController]()\nlazy val personController: PersonPageController =\n  getController[PersonPageController]()\nlazy val navigationController: NavigationController =\n  getController[NavigationController]()\nlazy val statusBarController: StatusBarController =\n  new StatusBarController()","title":"Prepare SubController"},{"location":"/tutorial/main_view.html#connect-with-fxml-identifier","text":"copysource@FXML\nvar workspacePane: Pane = _\n@FXML\nvar statusPane: Pane = _\n@FXML\nvar navigationPane: Pane = _","title":"Connect with FXML identifier"},{"location":"/tutorial/main_view.html#contentmanager","text":"copysourcevar workspaceManager: SFXContentManager = _\nvar navigationManager: SFXContentManager = _\nvar statusBarManager: SFXContentManager = _","title":"ContentManager"},{"location":"/tutorial/main_view.html#init-controller","text":"copysourceoverride def didGainVisibilityFirstTime() {\n  super.didGainVisibility()\n  navigationManager = SFXContentManager(navigationPane, this, navigationController)\n  statusBarManager = SFXContentManager(statusPane, this, statusBarController)\n  workspaceManager = SFXContentManager(workspacePane, this, workspaceController)\n}","title":"Init Controller"},{"location":"/tutorial/navigation.html","text":"","title":"Tutorial Navigation"},{"location":"/tutorial/navigation.html#tutorial-navigation","text":"","title":"Tutorial Navigation"},{"location":"/tutorial/navigation.html#navigation-fxml-file","text":"copysource<AnchorPane fx:controller=\"NavigationController\">\n    <children>\n        <HBox>\n            <children>\n                <Button onAction=\"#actionToggleWorkspace\"\n                        text=\"%navigation.toggle\"/>\n                <Button onAction=\"#actionShowPersonController\"\n                        text=\"FXBean Demo\"/>\n                <Button onAction=\"#actionClickButton\"\n                        text=\"Action Button\"/>\n                <Button id=\"debugButton\" onAction=\"#actionReload\"\n                        text=\"[Debug] Reload\"/>\n            </children>\n            <padding>\n                <Insets left=\"10.0\" top=\"7.0\"/>\n            </padding>\n        </HBox>\n    </children>\n    <stylesheets>\n        <URL value=\"@default.css\"/>\n    </stylesheets>\n</AnchorPane>","title":"Navigation FXML File"},{"location":"/tutorial/navigation.html#navigationcontroller","text":"copysourcepackage com.sfxcode.sapphire.javafx.demo.tutorial.controller.app\n\nimport com.sfxcode.sapphire.javafx.demo.tutorial.controller.base.AbstractViewController\nimport com.sfxcode.sapphire.javafx.scene.SFXEaseInTransition\nimport javafx.event.ActionEvent\nimport javafx.scene.control.Button\n\nclass NavigationController extends AbstractViewController {\n\n  def actionToggleWorkspace(event: ActionEvent) {\n    actionClickButton(event)\n    val actualController = workspaceManager.actualController\n    val barChartController = mainViewController.barChartController\n    val workspaceController = mainViewController.workspaceController\n    if (actualController == workspaceController)\n      workspaceManager.updateWithTransition(barChartController)\n    else\n      workspaceManager.updateWithTransition(workspaceController)\n  }\n\n  def actionShowPersonController(event: ActionEvent): Unit = {\n    actionClickButton(event)\n    val personController = mainViewController.personController\n    workspaceManager.updateWithTransition(personController)\n  }\n\n  def actionClickButton(event: ActionEvent) {\n    logger.debug(event.toString)\n\n    val button = event.getSource.asInstanceOf[Button]\n    statusBarController.updateLabel(button)\n  }\n\n  def actionReload(event: ActionEvent): Unit = {\n    actionClickButton(event)\n    applicationController.reload()\n  }\n\n}","title":"NavigationController"},{"location":"/development/index.html","text":"","title":"Development"},{"location":"/development/index.html#development","text":"Development Tools IntelliJ IDE SceneBuilder ScenicView SBT Plugins Hot Reloading DCEVM and HotSwapAgent Hot Scene Reloading","title":"Development"},{"location":"/development/tools.html","text":"","title":"Development Tools"},{"location":"/development/tools.html#development-tools","text":"Some useful tools.","title":"Development Tools"},{"location":"/development/tools.html#intellij-ide","text":"IntelliJ is my favorite IDE for Scala / JavaFX Coding. Even the Community Edition has all features for developing JavaFX Applications.","title":"IntelliJ IDE"},{"location":"/development/tools.html#scenebuilder","text":"Scenebuilder (backed by Gluon) can be found at the Gluon Site.","title":"SceneBuilder"},{"location":"/development/tools.html#scenicview","text":"Scenic View is a JavaFX application designed to make it simple to understand the current state of your application scenegraph, and to also easily manipulate properties of the scenegraph without having to keep editing your code. This lets you find bugs, and get things pixel perfect without having to do the compile-check-compile dance.","title":"ScenicView"},{"location":"/development/tools.html#sbt-plugins","text":"","title":"SBT Plugins"},{"location":"/development/tools.html#sbt-javafx","text":"(Simple Build Tool) plugin for building JavaFx Application\nDocumentation","title":"sbt-javafx"},{"location":"/development/hot_reload.html","text":"","title":"Hot Reloading"},{"location":"/development/hot_reload.html#hot-reloading","text":"Some tips and tricks to speed your development.","title":"Hot Reloading"},{"location":"/development/hot_reload.html#dcevm-and-hotswapagent","text":"DCEVM together with HotSwapAgent can speedup your development. It enhance the ability of reloading of changed classes especially with scala.","title":"DCEVM and HotSwapAgent"},{"location":"/development/hot_reload.html#hot-scene-reloading","text":"Reloading can be used for:\nCSS FXML Bundle Content","title":"Hot Scene Reloading"},{"location":"/development/hot_reload.html#setup","text":"Create a new method in your ApplicationController:\ndef reload(): Unit = {\n    // Styling\n    reloadStyles()\n    // Resources\n    applicationEnvironment.clearResourceBundleCache()\n    applicationEnvironment.loadResourceBundle(\"bundles/application\")\n    // FXML\n    val newMainViewController = getController[MainViewController]()\n    replaceSceneContent(newMainViewController)\n  }\nCreate a Button anywhere in your application and an corresponding action:\ndef actionReload(event: ActionEvent) {\n    getBean[ApplicationController]().reload()\n  }","title":"Setup"},{"location":"/development/hot_reload.html#intellij","text":"Very useful for compile on save is the Save Actions Plugin","title":"IntelliJ"},{"location":"/sample/index.html","text":"","title":"Examples"},{"location":"/sample/index.html#examples","text":"Showcase Showcase Parts Showcase Impressions Samples Basic Tutorial Login Demo Issues Demo Multiple Windows Demo Samples Advanced sapphire-jfoenix-demo","title":"Examples"},{"location":"/sample/showcase.html","text":"","title":"Showcase"},{"location":"/sample/showcase.html#showcase","text":"Showcase shows UI Components, Pattern, Examples …\nIf someone will take a quick look how something is implemented, this is a good place.","title":"Showcase"},{"location":"/sample/showcase.html#showcase-parts","text":"UI Shows the UI Output SFXViewController Code FXML Code Some docs - more to come","title":"Showcase Parts"},{"location":"/sample/showcase.html#showcase-impressions","text":"","title":"Showcase Impressions"},{"location":"/sample/basic.html","text":"","title":"Samples Basic"},{"location":"/sample/basic.html#samples-basic","text":"Basic sapphire-javafx examples.","title":"Samples Basic"},{"location":"/sample/basic.html#tutorial","text":"Tutorial Application.","title":"Tutorial"},{"location":"/sample/basic.html#login-demo","text":"JavaFX Login Demo pimped by Sapphire.","title":"Login Demo"},{"location":"/sample/basic.html#issues-demo","text":"JavaFX Issues Demo pimped by Sapphire.","title":"Issues Demo"},{"location":"/sample/basic.html#multiple-windows-demo","text":"JavaFX Multiple Windows Demo pimped by Sapphire.","title":"Multiple Windows Demo"},{"location":"/sample/advanced.html","text":"","title":"Samples Advanced"},{"location":"/sample/advanced.html#samples-advanced","text":"Advanced sapphire-javafx examples.","title":"Samples Advanced"},{"location":"/sample/advanced.html#sapphire-jfoenix-demo","text":"There is a Starter Project build with JFoenix on github: sapphire-jfoenix-demo","title":"sapphire-jfoenix-demo"},{"location":"/sample/advanced.html#features","text":"MVC Patttern Layout, Pages, Components, Widgets JFoenix UI Components and Sass Styling FXML Pattern (Table, Bindings, Expressions) (Local) MongoDB Database featured by simple-mongo CRUD Sample","title":"Features"},{"location":"/scalafx.html","text":"","title":"ScalaFX"},{"location":"/scalafx.html#scalafx","text":"Most of my own applications use scalafx because of a very useful DSL and some nice wrapper functions around javafx with extended functionality and / or the more scala friendly syntax.","title":"ScalaFX"},{"location":"/scalafx.html#documentation","text":"Documentation can be found at www.scalafx.org/docs/home/\nDocumentation is a little bit out of date, but there are also some other places to find useful information.\nGithub Release Notes Stackoverflow ScalaFX-Tutorials ProScalaFX","title":"Documentation"},{"location":"/scalafx.html#usage","text":"Include following snippet in your build.sbt file:\nlibraryDependencies += \"org.scalafx\" %% \"scalafx\" % \"15.0.1-R21\"\nIn your classes add scalafx Includes to your imports:\nimport scalafx.Includes._","title":"Usage"},{"location":"/scalafx.html#sapphire-with-scalafx","text":"","title":"Sapphire with ScalaFX"},{"location":"/scalafx.html#issuetrackinglite","text":"Sapphire IssueTrackingLite Demo in the sapphire-javafx demo section use ScalaFX.","title":"IssueTrackingLite"},{"location":"/scalafx.html#reasons-to-use-scalafx","text":"I use ScalaFX in nearly all of my projects.\nUI DSL for declarative scene graph objects creation Automatic conversion to Scala Scala like Collection support …","title":"Reasons to use ScalaFX"},{"location":"/changes.html","text":"","title":"Version History"},{"location":"/changes.html#version-history","text":"","title":"Version History"},{"location":"/changes.html#current-version","text":"","title":"Current Version"},{"location":"/changes.html#download","text":"","title":"Download"},{"location":"/changes.html#history","text":"copysource# Changes\n\n## Versions\n\n### 1.1.2\n* Update to \"sapphire-data\" % \"1.1.0\"\n* fixed [https://github.com/sfxcode/sapphire-javafx/issues/23](https://github.com/sfxcode/sapphire-javafx/issues/23)\n\n### 1.1.1\n* fixed [https://github.com/sfxcode/sapphire-javafx/issues/21](https://github.com/sfxcode/sapphire-javafx/issues/21)\n\n### 1.1.0\n* BREAKING CHANGE: Namespace **SFX** is added as prefix to all Classes and Styles (see Migration.md)\n* SFXConfigValues is deprecated use: com.sfxcode.sapphire.data.Configuration\n* Fixed DataListViews CSS Bug\n\n### 1.0.6\n* WindowsController Cleanup\n* WindowsController: createScene,  replaceSceneContentWithNode can now be overwritten\n### 1.0.5\nUpdate to \"sapphire-data\" % \"1.0.4\"\n\n### 1.0.4\n* FXValueFactory Date / DateTime format added\n\n### 1.0.3\n* EventHelper added\n\n### 1.0.2\n* MasterController takes doubleClick action only for TableRow (not TableHeader)\n* FXMLoading replaces package path with custom path if configured (see tutorial config)\n\n### 1.0.1\n* scala 2.13.5\n* Dependency Updates\n\n### 1.0.0\n* combines sapphire-core and sapphire-extension","title":"History"},{"location":"/changes.html#migration","text":"copysource# Migrations\n\n## 1.0.x to sapphire-javafx 1.1*\n* Refactoring for a valid prexix:\n* Namespace **SFX** is added as prefix to all Classes (e.g. DataListView -> SFXDataListView)\n* Classes with existing Prefix **FX** renamed to **SFX** Prefix (e.g. FXApplication -> SFXApplication)\n* Styleclasses and styles also get the prefix **sfx-**\n\n### Migration Steps:\n* Global Replace 'BaseApplication' with 'SFXApplication'\n* Global Replace ' ViewController' with 'SFXViewController'\n* Global Replace '.ViewController' with '.SFXViewController'\n* Global Replace 'SFXBase' with 'SFX'\n* Add to all other unknown classes SFX Prefix (or replace FX Prefix with SFX if exists)\n* (FXML) Global Replace FXTableValueFactory with SFXTableValueFactory\n* Replace ConfigValues with Configuration from sapphire-data\n\n## 2.0.x to sapphire-javafx 1.*\n* replace sapphire.core with sapphire.javafx\n* data handling is extracted to a new project: sapphire-data\n* CDI, ScalaFX usages please follow the exampes in the sapphire-java demo applications\n\n# Migration for old sapphire-core project\n\n## 1.6.x to 2.0.0\n* CDI dependencies are removed\n* ApplicationScoped Beans are now Singletons\n* Best way to access applicationController is now: ApplicationEnvironment.applicationController[ApplicationController]\n* Use CDI if needed with MacWire, Guice, or other CDI Framework (CDI example in issues demo)\n* Application must extend now BaseApplication and needs to implement applicationController as val\n* FxmlLoader must be renamed to FxmlLocation\n\n```scala\nobject Application extends BaseApplication {\n\n  // some custom code ...\n  override val applicationController: BaseApplicationController = new ApplicationController\n}\n```\n\n* ApplicationController must extend now BaseApplicationController\n\n```scala\nclass ApplicationController extends BaseApplicationController with LazyLogging {\n\n  // some custom code ...\n\n}\n```\n\n## 1.6.5 to 1.6.6\n* FXMLLoading url and resources properties now Options\n\n## 1.6.1 to 1.6.2\n* CollectionExtensions and ConfigValues moved to package root\n* Remove SceneExtensions\n\n## 1.x to 1.6\n* scalafx dependency removed (add dependency on project if needed)\n* Includes Removed => use BeanConversions trait\n* Prefer WindowController instead of deprecated AppController","title":"Migration"},{"location":"/migration.html","text":"","title":"Migration"},{"location":"/migration.html#migration","text":"copysource# Migrations\n\n## 1.0.x to sapphire-javafx 1.1*\n* Refactoring for a valid prexix:\n* Namespace **SFX** is added as prefix to all Classes (e.g. DataListView -> SFXDataListView)\n* Classes with existing Prefix **FX** renamed to **SFX** Prefix (e.g. FXApplication -> SFXApplication)\n* Styleclasses and styles also get the prefix **sfx-**\n\n### Migration Steps:\n* Global Replace 'BaseApplication' with 'SFXApplication'\n* Global Replace ' ViewController' with 'SFXViewController'\n* Global Replace '.ViewController' with '.SFXViewController'\n* Global Replace 'SFXBase' with 'SFX'\n* Add to all other unknown classes SFX Prefix (or replace FX Prefix with SFX if exists)\n* (FXML) Global Replace FXTableValueFactory with SFXTableValueFactory\n* Replace ConfigValues with Configuration from sapphire-data\n\n## 2.0.x to sapphire-javafx 1.*\n* replace sapphire.core with sapphire.javafx\n* data handling is extracted to a new project: sapphire-data\n* CDI, ScalaFX usages please follow the exampes in the sapphire-java demo applications\n\n# Migration for old sapphire-core project\n\n## 1.6.x to 2.0.0\n* CDI dependencies are removed\n* ApplicationScoped Beans are now Singletons\n* Best way to access applicationController is now: ApplicationEnvironment.applicationController[ApplicationController]\n* Use CDI if needed with MacWire, Guice, or other CDI Framework (CDI example in issues demo)\n* Application must extend now BaseApplication and needs to implement applicationController as val\n* FxmlLoader must be renamed to FxmlLocation\n\n```scala\nobject Application extends BaseApplication {\n\n  // some custom code ...\n  override val applicationController: BaseApplicationController = new ApplicationController\n}\n```\n\n* ApplicationController must extend now BaseApplicationController\n\n```scala\nclass ApplicationController extends BaseApplicationController with LazyLogging {\n\n  // some custom code ...\n\n}\n```\n\n## 1.6.5 to 1.6.6\n* FXMLLoading url and resources properties now Options\n\n## 1.6.1 to 1.6.2\n* CollectionExtensions and ConfigValues moved to package root\n* Remove SceneExtensions\n\n## 1.x to 1.6\n* scalafx dependency removed (add dependency on project if needed)\n* Includes Removed => use BeanConversions trait\n* Prefer WindowController instead of deprecated AppController","title":"Migration"}]}